expression Page = 1 meta [IsParameterQuery=true, Type="Any", IsParameterQueryRequired=true]
	lineageTag: 14c5a33f-a195-49a7-8f49-e2528ef7b586
	queryGroup: Parameter

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Number

expression Rows = 25 meta [IsParameterQuery=true, Type="Any", IsParameterQueryRequired=true]
	lineageTag: 42cb74ab-469d-45b9-a023-3220681a6120
	queryGroup: Parameter

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Number

expression GetSWUAPIPages =
		(page as number) =>
		let
		     Source = Json.Document(Web.Contents("https://admin.starwarsunlimited.com/api/card-list?locale=en&pagination[page]=" & Number.ToText(page) & "&pagination[pageSize]=" & Number.ToText(#"Rows") & "")),
		     data = Source[data]
		in
		     data
	lineageTag: f3500b2c-bc7b-43ed-ad35-60ef15409c00
	queryGroup: Function

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Function

expression 'Homepage Links' =
		let
		    #"HTML Code" = Web.BrowserContents("https://nexus.cascadegames.com/"),
		    #"Converted to Table" = #table(1, {{#"HTML Code"}}),
		    ExtractedLinks = Table.TransformColumns(#"Converted to Table", {"Column1", each Text.Split(_, "<a")}),
		    ExpandedLinks = Table.ExpandListColumn(ExtractedLinks, "Column1"),
		    ExtractHyperlinks = Table.AddColumn(ExpandedLinks, "Hyperlink", each Text.BetweenDelimiters([Column1], "href=""", """")),
		    ExtractLinkText = Table.AddColumn(ExtractHyperlinks, "LinkText", each Text.BetweenDelimiters([Column1], ">", "</a>")),
		    CleanedTable = Table.SelectColumns(ExtractLinkText, {"Hyperlink", "LinkText"}),
		    #"Added Custom" = Table.AddColumn(CleanedTable, "Custom", each if Text.StartsWith([Hyperlink], "http") then [Hyperlink] else "https://nexus.cascadegames.com" & [Hyperlink]),
		    #"Filtered Rows" = Table.SelectRows(#"Added Custom", each ([Hyperlink] <> "#")),
		    #"Renamed Columns" = Table.RenameColumns(#"Filtered Rows",{{"Custom", "WebLink"}})
		in
		    #"Renamed Columns"
	lineageTag: 321aee7b-6ff3-42cd-8011-d1d9ea36e5e1
	queryGroup: 'Cacade Tables'

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression 'Resource Links' =
		let
		    #"HTML Code" = Web.BrowserContents("https://nexus.cascadegames.com/resources/"),
		    #"Converted to Table" = #table(1, {{#"HTML Code"}}),
		    ExtractedLinks = Table.TransformColumns(#"Converted to Table", {"Column1", each Text.Split(_, "<a")}),
		    ExpandedLinks = Table.ExpandListColumn(ExtractedLinks, "Column1"),
		    ExtractHyperlinks = Table.AddColumn(ExpandedLinks, "Hyperlink", each Text.BetweenDelimiters([Column1], "href=""", """")),
		    ExtractLinkText = Table.AddColumn(ExtractHyperlinks, "LinkText", each Text.BetweenDelimiters([Column1], ">", "</a>")),
		    CleanedTable = Table.SelectColumns(ExtractLinkText, {"Hyperlink", "LinkText"}),
		    #"Added Custom" = Table.AddColumn(CleanedTable, "Custom", each if Text.StartsWith([Hyperlink], "http") then [Hyperlink] else "https://nexus.cascadegames.com" & [Hyperlink]),
		    #"Filtered Rows" = Table.SelectRows(#"Added Custom", each ([Hyperlink] <> "#")),
		    #"Renamed Columns" = Table.RenameColumns(#"Filtered Rows",{{"Custom", "WebLink"}})
		in
		    #"Renamed Columns"
	lineageTag: 15aa0470-41e9-44b1-a8c7-01bf344200d9
	queryGroup: 'Cacade Tables'

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression Groups =
		let
		     Source = Json.Document(Web.Contents("https://tcgcsv.com/tcgplayer/79/groups")),
		     data = Source[results],
		    #"Converted to Table" = Table.FromList(data, Splitter.SplitByNothing(), null, null, ExtraValues.Error),
		    #"Expanded Column1" = Table.ExpandRecordColumn(#"Converted to Table", "Column1", {"groupId", "name", "abbreviation", "isSupplemental", "publishedOn", "modifiedOn", "categoryId"}, {"groupId", "name", "abbreviation", "isSupplemental", "publishedOn", "modifiedOn", "categoryId"})
		in
		    #"Expanded Column1"
	lineageTag: 878ef626-98c7-4118-a732-40c82bbeafa8
	queryGroup: 'TCGPlayer Pricing'

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression GetGroupProducts = ```
		(group as number) =>
		let
		    Source = Json.Document(
		        Web.Contents(
		            "https://tcgcsv.com", 
		            [
		                RelativePath = "/tcgplayer/79/" & Number.ToText(group) & "/products"
		            ]
		        )
		    ),
		    data = Source[results]
		in
		    data
		```
	lineageTag: d5deeb59-19a3-4587-8d3c-29cf31ef0e98
	queryGroup: Function

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Function

expression GetGroupPrices = ```
		(group as number) =>
		let
		    Source = Json.Document(
		        Web.Contents(
		            "https://tcgcsv.com", 
		            [
		                RelativePath = "/tcgplayer/79/" & Number.ToText(group) & "/prices"
		            ]
		        )
		    ),
		    data = Source[results]
		in
		    data
		```
	lineageTag: d150f783-714e-4da5-bb2b-be980313c636
	queryGroup: Function

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Function

expression Products = ```
		let
		    // Reference your Groups table
		    groupTable = Groups,
		
		    // Get just the groupId column as a list
		    groupIds = groupTable[groupId],
		
		    // Call the function for each groupId
		    results = List.Transform(groupIds, each 
		        [ 
		            group = _, 
		            data = try GetGroupProducts(_) otherwise null
		        ]
		    ),
		
		    // Remove any nulls (failed API calls)
		    cleanResults = List.Select(results, each [data] <> null),
		    #"Converted to Table" = Table.FromList(cleanResults, Splitter.SplitByNothing(), null, null, ExtraValues.Error),
		    #"Expanded Column1" = Table.ExpandRecordColumn(#"Converted to Table", "Column1", {"group", "data"}, {"group", "data"}),
		    #"Expanded data" = Table.ExpandListColumn(#"Expanded Column1", "data"),
		    #"Expanded data1" = Table.ExpandRecordColumn(#"Expanded data", "data", {"productId", "name", "cleanName", "imageUrl", "categoryId", "groupId", "url", "modifiedOn", "imageCount", "presaleInfo", "extendedData"}, {"productId", "name", "cleanName", "imageUrl", "categoryId", "groupId", "url", "modifiedOn", "imageCount", "presaleInfo", "extendedData"}),
		    #"Expanded extendedData" = Table.ExpandListColumn(#"Expanded data1", "extendedData"),
		    #"Expanded extendedData1" = Table.ExpandRecordColumn(#"Expanded extendedData", "extendedData", {"name", "displayName", "value"}, {"name.1", "displayName", "value"}),
		    #"Filtered Rows" = Table.SelectRows(#"Expanded extendedData1", each ([name.1] = "Number")),
		    #"Removed Columns" = Table.RemoveColumns(#"Filtered Rows",{"name.1", "displayName", "presaleInfo"}),
		    #"Renamed Columns" = Table.RenameColumns(#"Removed Columns",{{"value", "cardNumber"}}),
		    #"Merged Queries" = Table.NestedJoin(#"Renamed Columns", {"group"}, Groups, {"groupId"}, "Groups", JoinKind.LeftOuter),
		    #"Expanded Groups" = Table.ExpandTableColumn(#"Merged Queries", "Groups", {"name", "abbreviation"}, {"name.1", "abbreviation"}),
		    #"Renamed Columns1" = Table.RenameColumns(#"Expanded Groups",{{"name.1", "setName"}}),
		    #"Reordered Columns" = Table.ReorderColumns(#"Renamed Columns1",{"group", "productId", "name", "cleanName", "imageUrl", "categoryId", "groupId", "url", "modifiedOn", "imageCount", "cardNumber", "abbreviation", "setName"})
		in
		    #"Reordered Columns"
		```
	lineageTag: bc50e7e4-6317-4fd0-8909-14e74f798e7f
	queryGroup: 'TCGPlayer Pricing'

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression Prices = ```
		let
		    // Reference your Groups table
		    groupTable = Groups,
		
		    // Get just the groupId column as a list
		    groupIds = groupTable[groupId],
		
		    // Call the function for each groupId
		    results = List.Transform(groupIds, each 
		        [ 
		            group = _, 
		            data = try GetGroupPrices(_) otherwise null
		        ]
		    ),
		
		    // Remove any nulls (failed API calls)
		    cleanResults = List.Select(results, each [data] <> null),
		    #"Converted to Table" = Table.FromList(cleanResults, Splitter.SplitByNothing(), null, null, ExtraValues.Error),
		    #"Expanded Column1" = Table.ExpandRecordColumn(#"Converted to Table", "Column1", {"group", "data"}, {"group", "data"}),
		    #"Expanded data" = Table.ExpandListColumn(#"Expanded Column1", "data"),
		    #"Expanded data1" = Table.ExpandRecordColumn(#"Expanded data", "data", {"productId", "lowPrice", "midPrice", "highPrice", "marketPrice", "directLowPrice", "subTypeName"}, {"productId", "lowPrice", "midPrice", "highPrice", "marketPrice", "directLowPrice", "subTypeName"}),
		    #"Filtered Rows" = Table.SelectRows(#"Expanded data1", each [productId] <> null and [productId] <> "")
		in
		    #"Filtered Rows"
		```
	lineageTag: 0bb00db4-f673-4919-a97d-898f34c83a0a
	queryGroup: 'TCGPlayer Pricing'

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression 'File Path' = "C:\PlaceHolder\PathToProject" meta [IsParameterQuery=true, Type="Any", IsParameterQueryRequired=true]
	lineageTag: 364fe700-e36b-4e0c-aba8-9fd5c7daf978
	queryGroup: Parameter

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Text

expression 'Sample File' =
		let
		    Source = Folder.Files(#"File Path" & "\swu-pbi-project-main\Decklists"),
		    Navigation1 = Source{0}[Content]
		in
		    Navigation1
	lineageTag: 69da7462-6b6d-462c-98fe-d2d9a47135d2
	queryGroup: 'Folder Tables\Transform File from Decklists\Helper Queries'

	annotation PBI_ResultType = Binary

	annotation PBI_NavigationStepName = Navigation

expression Parameter1 = #"Sample File" meta [IsParameterQuery=true, BinaryIdentifier=#"Sample File", Type="Binary", IsParameterQueryRequired=true]
	lineageTag: 9d969e2c-f7b7-485a-8406-3e673df3b1eb
	queryGroup: 'Folder Tables\Transform File from Decklists\Helper Queries'

	annotation PBI_ResultType = Binary

expression 'Transform Sample File' =
		let
		    Source = Json.Document(Parameter1),
		    #"Converted to Table" = Table.FromRecords({Source}),
		    #"Expanded metadata" = Table.ExpandRecordColumn(#"Converted to Table", "metadata", {"name", "author"}, {"metadata.name", "metadata.author"}),
		    #"Expanded leader" = Table.ExpandRecordColumn(#"Expanded metadata", "leader", {"id", "count"}, {"leader.id", "leader.count"}),
		    #"Expanded base" = Table.ExpandRecordColumn(#"Expanded leader", "base", {"id", "count"}, {"base.id", "base.count"}),
		    #"Changed Type" = Table.TransformColumnTypes(#"Expanded base",{{"metadata.name", type text}, {"metadata.author", type text}, {"leader.id", type text}, {"leader.count", Int64.Type}, {"base.id", type text}, {"base.count", Int64.Type}, {"deck", type any}, {"sideboard", type any}})
		in
		    #"Changed Type"
	lineageTag: a9b21813-a912-4d51-8f98-7bedfaae5085
	queryGroup: 'Folder Tables\Transform File from Decklists'

	annotation PBI_ResultType = Record

expression 'Transform File' =
		let
		    Source = (Parameter1 as binary) => let
		    Source = Json.Document(Parameter1),
		    #"Converted to Table" = Table.FromRecords({Source}),
		    #"Expanded metadata" = Table.ExpandRecordColumn(#"Converted to Table", "metadata", {"name", "author"}, {"metadata.name", "metadata.author"}),
		    #"Expanded leader" = Table.ExpandRecordColumn(#"Expanded metadata", "leader", {"id", "count"}, {"leader.id", "leader.count"}),
		    #"Expanded base" = Table.ExpandRecordColumn(#"Expanded leader", "base", {"id", "count"}, {"base.id", "base.count"}),
		    #"Changed Type" = Table.TransformColumnTypes(#"Expanded base",{{"metadata.name", type text}, {"metadata.author", type text}, {"leader.id", type text}, {"leader.count", Int64.Type}, {"base.id", type text}, {"base.count", Int64.Type}, {"deck", type any}, {"sideboard", type any}})
		in
		    #"Changed Type"
		in
		    Source
	mAttributes: [ FunctionQueryBinding = "{""exemplarFormulaName"":""Transform Sample File""}" ]
	lineageTag: 44837f18-239d-433b-afcd-9ef8e5dd2291
	queryGroup: 'Folder Tables\Transform File from Decklists\Helper Queries'

	annotation PBI_ResultType = Function

expression Maindeck =
		let
		    Source = Folder.Files(#"File Path" & "\swu-pbi-project-main\Decklists"),
		    #"Filtered Hidden Files1" = Table.SelectRows(Source, each [Attributes]?[Hidden]? <> true),
		    #"Invoke Custom Function1" = Table.AddColumn(#"Filtered Hidden Files1", "Transform File", each #"Transform File"([Content])),
		    #"Renamed Columns1" = Table.RenameColumns(#"Invoke Custom Function1", {"Name", "Source.Name"}),
		    #"Removed Other Columns1" = Table.SelectColumns(#"Renamed Columns1", {"Source.Name", "Transform File"}),
		    #"Expanded Table Column1" = Table.ExpandTableColumn(#"Removed Other Columns1", "Transform File", Table.ColumnNames(#"Transform File"(#"Sample File"))),
		    #"Changed Type" = Table.TransformColumnTypes(#"Expanded Table Column1",{{"Source.Name", type text}, {"metadata.name", type text}, {"metadata.author", type text}, {"leader.id", type text}, {"leader.count", Int64.Type}, {"base.id", type text}, {"base.count", Int64.Type}, {"deck", type any}, {"sideboard", type any}}),
		    #"Removed Columns" = Table.RemoveColumns(#"Changed Type",{"sideboard"}),
		    #"Expanded deck" = Table.ExpandListColumn(#"Removed Columns", "deck"),
		    #"Expanded deck1" = Table.ExpandRecordColumn(#"Expanded deck", "deck", {"id", "count"}, {"deck.id", "deck.count"})
		in
		    #"Expanded deck1"
	lineageTag: 6fa97376-97de-4fa0-9039-55990aa69da5
	queryGroup: 'Folder Tables'

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression Sideboards =
		let
		    Source = Folder.Files(#"File Path" & "\swu-pbi-project-main\Decklists"),
		    #"Filtered Hidden Files1" = Table.SelectRows(Source, each [Attributes]?[Hidden]? <> true),
		    #"Invoke Custom Function1" = Table.AddColumn(#"Filtered Hidden Files1", "Transform File", each #"Transform File"([Content])),
		    #"Renamed Columns1" = Table.RenameColumns(#"Invoke Custom Function1", {"Name", "Source.Name"}),
		    #"Removed Other Columns1" = Table.SelectColumns(#"Renamed Columns1", {"Source.Name", "Transform File"}),
		    #"Expanded Table Column1" = Table.ExpandTableColumn(#"Removed Other Columns1", "Transform File", Table.ColumnNames(#"Transform File"(#"Sample File"))),
		    #"Changed Type" = Table.TransformColumnTypes(#"Expanded Table Column1",{{"Source.Name", type text}, {"metadata.name", type text}, {"metadata.author", type text}, {"leader.id", type text}, {"leader.count", Int64.Type}, {"base.id", type text}, {"base.count", Int64.Type}, {"deck", type any}, {"sideboard", type any}}),
		    #"Removed Columns" = Table.RemoveColumns(#"Changed Type",{"deck"}),
		    #"Expanded sideboard" = Table.ExpandListColumn(#"Removed Columns", "sideboard"),
		    #"Expanded sideboard1" = Table.ExpandRecordColumn(#"Expanded sideboard", "sideboard", {"id", "count"}, {"sideboard.id", "sideboard.count"})
		in
		    #"Expanded sideboard1"
	lineageTag: c3de88c5-5242-442f-b0ae-5a76b54f922f
	queryGroup: 'Folder Tables'

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression 'Rules Clarifications' =
		let
		    // Load markdown content from GitHub Gist
		    Source = Text.FromBinary(Web.Contents("https://gist.githubusercontent.com/macfergusson/256a534a98fc1d45f2595503f7d54953/raw/c55e1e4c5bedef1ecfaa18e6ce26374a895a9d32/SWU_Resources.md")),
		
		    // Split the text into blocks
		    Blocks = Text.Split(Source, "-------------------------------------------------"),
		    TrimmedBlocks = List.Transform(Blocks, each Text.Trim(_)),
		    NonEmptyBlocks = List.Select(TrimmedBlocks, each Text.Length(_) > 0),
		
		    // Parse each block
		    ParseBlock = (block as text) =>
		        let
		            Lines = Text.Split(block, "#(lf)"),
		
		            // Get line index of "**Question:**"
		            QuestionHeaderIndex = List.PositionOfAny(Lines, List.Select(Lines, each Text.Contains(_, "**Question:**"))),
		
		            // Lines after "**Question:**"
		            AfterQuestionHeader = List.Skip(Lines, QuestionHeaderIndex + 1),
		
		            // First line containing the actual bolded question
		            FirstBoldLine = List.First(List.Select(AfterQuestionHeader, each Text.Contains(_, "**"))),
		
		            // SAFELY extract first bolded text using Text.BetweenDelimiters
		            QuestionText = Text.BetweenDelimiters(FirstBoldLine, "**", "**"),
		
		                        // Get index of the bolded question line
		            FirstBoldIndex = List.PositionOf(AfterQuestionHeader, FirstBoldLine),
		
		            // Lines after the bolded question
		            AfterBold = List.Skip(AfterQuestionHeader, FirstBoldIndex + 1),
		
		            // Find the index of the first CR line in the full Lines list
		            CRLineIndex = List.PositionOfAny(Lines, List.Select(Lines, each Text.StartsWith(Text.Trim(_), "CR "))),
		
		            // If CR found, figure out how far it is from AfterBold
		            CRAbsoluteIndex = if CRLineIndex <> -1 then CRLineIndex else List.Count(Lines),
		            AbsoluteAfterBoldStart = List.PositionOf(Lines, AfterBold{0}),
		            ExampleLineCount = CRAbsoluteIndex - AbsoluteAfterBoldStart,
		
		            // Extract example lines and join
		            ExampleLines = List.FirstN(AfterBold, ExampleLineCount),
		            ExampleText = Text.Combine(ExampleLines, " "),
		
		
		            // Extract CRs
		            CRLines = List.Select(Lines, each Text.StartsWith(Text.Trim(_), "CR ")),
		            CRTextLines = List.Select(Lines, each Text.StartsWith(Text.Trim(_), "*") and not Text.StartsWith(_, "**")),
		            CRs = List.Zip({CRLines, CRTextLines}),
		            CRTable = Table.FromRecords(List.Transform(CRs, each [
		                CRReference = Text.Trim(_{0}),
		                CRText = Text.Middle(Text.Trim(_{1}), 1, Text.Length(Text.Trim(_{1})) - 2)
		            ])),
		
		            // Extract answer
		            AnswerIndex = List.PositionOfAny(Lines, List.Select(Lines, each Text.Contains(_, "**Answer:**"))),
		            AfterAnswer = List.Skip(Lines, AnswerIndex + 1),
		            EndOfAnswerIndex = List.PositionOfAny(AfterAnswer, List.Select(AfterAnswer, each Text.Contains(_, "`"))),
		            AnswerTextLines = if EndOfAnswerIndex = -1 then AfterAnswer else List.FirstN(AfterAnswer, EndOfAnswerIndex),
		            AnswerText = Text.Combine(AnswerTextLines, " "),
		
		            // Extract date
		            DateLine = List.First(List.Select(Lines, each Text.Contains(_, "`(Answer shared on"))),
		            DateText = Text.Middle(
		                DateLine,
		                Text.PositionOf(DateLine, "(") + 1,
		                Text.PositionOf(DateLine, ")") - Text.PositionOf(DateLine, "(") - 1
		            )
		        in
		            [
		                Question = QuestionText,
		                Example = ExampleText,
		                CRs = CRTable,
		                Answer = AnswerText,
		                Date = DateText
		            ],
		
		    // Apply parsing to all blocks
		    Parsed = List.Transform(NonEmptyBlocks, each ParseBlock(_)),
		    Output = Table.FromRecords(Parsed),
		    #"Filtered Rows" = Table.SelectRows(Output, each ([Question] <> ""))
		in
		    #"Filtered Rows"
	lineageTag: 50aa8a7b-d70a-411b-8749-dae03ad30538
	queryGroup: 'Cacade Tables'

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression Base =
		let
		    Source = List.Generate(
		        () => [Result = try GetSWUAPIPages(1) otherwise null, pagenumber=1],
		        each List.IsEmpty([Result]) = false,
		        each [Result = try GetSWUAPIPages(pagenumber) otherwise null, pagenumber = [pagenumber] + 1],
		        each [Result]),
		    #"Converted to Table" = Table.FromList(Source, Splitter.SplitByNothing(), null, null, ExtraValues.Error),
		    #"Expanded Column1" = Table.ExpandListColumn(#"Converted to Table", "Column1"),
		    #"Expanded Column2" = Table.ExpandRecordColumn(#"Expanded Column1", "Column1", {"id", "attributes"}, {"id", "attributes"}),
		    #"Expanded attributes" = Table.ExpandRecordColumn(#"Expanded Column2", "attributes", {"title", "subtitle", "cardNumber", "cardCount", "artist", "artFrontHorizontal", "artBackHorizontal", "hasFoil", "cost", "hp", "power", "text", "textStyled", "deployBox", "deployBoxStyled", "epicAction", "epicActionStyled", "linkHtml", "cardId", "createdAt", "updatedAt", "publishedAt", "locale", "hyperspace", "unique", "showcase", "cardUid", "rules", "rulesStyled", "serialCode", "upgradeHp", "upgradePower", "artFront", "artBack", "artThumbnail", "localizations", "aspects", "aspectDuplicates", "type", "type2", "traits", "arenas", "keywords", "rarity", "expansion", "variantTypes", "variantOf", "reprintOf", "validationId"}, {"title", "subtitle", "cardNumber", "cardCount", "artist", "artFrontHorizontal", "artBackHorizontal", "hasFoil", "cost", "hp", "power", "text", "textStyled", "deployBox", "deployBoxStyled", "epicAction", "epicActionStyled", "linkHtml", "cardId", "createdAt", "updatedAt", "publishedAt", "locale", "hyperspace", "unique", "showcase", "cardUid", "rules", "rulesStyled", "serialCode", "upgradeHp", "upgradePower", "artFront", "artBack", "artThumbnail", "localizations", "aspects", "aspectDuplicates", "type", "type2", "traits", "arenas", "keywords", "rarity", "expansion", "variantTypes", "variantOf", "reprintOf", "validationId"}),
		    #"Expanded type" = Table.ExpandRecordColumn(#"Expanded attributes", "type", {"data"}, {"type.data"}),
		    #"Expanded type.data" = Table.ExpandRecordColumn(#"Expanded type", "type.data", {"attributes"}, {"type.data.attributes"}),
		    #"Expanded type.data.attributes" = Table.ExpandRecordColumn(#"Expanded type.data", "type.data.attributes", {"name"}, {"type.data.attributes.name"}),
		    #"Filtered Rows" = Table.SelectRows(#"Expanded type.data.attributes", each not Text.Contains([type.data.attributes.name], "Token"))
		in
		    #"Filtered Rows"
	lineageTag: a2ae0752-1444-4598-9bab-521bc7ee93a2
	queryGroup: 'API Tables'

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression 'Google Sheets Link' = "https://docs.google.com/spreadsheets/d/1ymASHx_Tr96ny7D32RozMHar14Bde2wRLNIRAaOMiv8/edit?gid=1884736088#gid=1884736088" meta [IsParameterQuery=true, Type="Any", IsParameterQueryRequired=true]
	lineageTag: a0b3f9e0-7e5b-478d-856e-5110b80252d9
	queryGroup: Parameter

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Text

